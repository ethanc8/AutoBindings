// C interface for class NSObject
signed int inst_compare(id arg2, id self);
unsigned char inst_isInstance(id self);
unsigned char inst_makeImmutable(id self);
id inst_makeImmutableCopyOnFail(unsigned char arg2, id self);
id inst_notImplemented(SEL arg2, id self);
id inst_shouldNotImplement(SEL arg2, id self);
id inst_subclassResponsibility(SEL arg2, id self);
void inst_appendToXMLRPC_indent_for(id arg2, unsigned int arg3, id arg4, id self);
void inst_smtpClient_mimeFailed(id arg2, id arg3, id self);
void inst_smtpClient_mimeSent(id arg2, id arg3, id self);
void inst_smtpClient_mimeUnsent(id arg2, id arg3, id self);
id inst_parser_resolveExternalEntityName_systemID(id arg2, id arg3, id arg4, id self);
void inst_parser_didEndElement_namespaceURI_qualifiedName(id arg2, id arg3, id arg4, id arg5, id self);
void inst_parser_didEndMappingPrefix(id arg2, id arg3, id self);
void inst_parser_didStartElement_namespaceURI_qualifiedName_attributes(id arg2, id arg3, id arg4, id arg5, id arg6, id self);
void inst_parser_didStartMappingPrefix_toURI(id arg2, id arg3, id arg4, id self);
void inst_parser_foundAttributeDeclarationWithName_forElement_type_defaultValue(id arg2, id arg3, id arg4, id arg5, id arg6, id self);
void inst_parser_foundCDATA(id arg2, id arg3, id self);
void inst_parser_foundCharacters(id arg2, id arg3, id self);
void inst_parser_foundComment(id arg2, id arg3, id self);
void inst_parser_foundElementDeclarationWithName_model(id arg2, id arg3, id arg4, id self);
void inst_parser_foundExternalEntityDeclarationWithName_publicID_systemID(id arg2, id arg3, id arg4, id arg5, id self);
void inst_parser_foundIgnorableWhitespace(id arg2, id arg3, id self);
void inst_parser_foundInternalEntityDeclarationWithName_value(id arg2, id arg3, id arg4, id self);
void inst_parser_foundNotationDeclarationWithName_publicID_systemID(id arg2, id arg3, id arg4, id arg5, id self);
void inst_parser_foundProcessingInstructionWithTarget_data(id arg2, id arg3, id arg4, id self);
void inst_parser_foundUnparsedEntityDeclarationWithName_publicID_systemID_notationName(id arg2, id arg3, id arg4, id arg5, id arg6, id self);
void inst_parser_parseErrorOccurred(id arg2, id arg3, id self);
void inst_parser_validationErrorOccurred(id arg2, id arg3, id self);
void inst_parserDidEndDocument(id arg2, id self);
void inst_parserDidStartDocument(id arg2, id self);
void inst_downloadDidBegin(id arg2, id self);
void inst_downloadDidFinish(id arg2, id self);
void inst_download_decideDestinationWithSuggestedFilename(id arg2, id arg3, id self);
void inst_download_didCancelAuthenticationChallenge(id arg2, id arg3, id self);
void inst_download_didCreateDestination(id arg2, id arg3, id self);
void inst_download_didFailWithError(id arg2, id arg3, id self);
void inst_download_didReceiveAuthenticationChallenge(id arg2, id arg3, id self);
void inst_download_didReceiveDataOfLength(id arg2, unsigned int arg3, id self);
void inst_download_didReceiveResponse(id arg2, id arg3, id self);
unsigned char inst_download_shouldDecodeSourceDataOfMIMEType(id arg2, id arg3, id self);
void inst_download_willResumeWithResponse_fromByte(id arg2, id arg3, signed long long arg4, id self);
id inst_download_willSendRequest_redirectResponse(id arg2, id arg3, id arg4, id self);
void inst_connection_didCancelAuthenticationChallenge(id arg2, id arg3, id self);
void inst_connection_didFailWithError(id arg2, id arg3, id self);
void inst_connectionDidFinishLoading(id arg2, id self);
void inst_connection_didReceiveAuthenticationChallenge(id arg2, id arg3, id self);
void inst_connection_didReceiveData(id arg2, id arg3, id self);
void inst_connection_didReceiveResponse(id arg2, id arg3, id self);
id inst_connection_willCacheResponse(id arg2, id arg3, id self);
id inst_connection_willSendRequest_redirectResponse(id arg2, id arg3, id arg4, id self);
void inst_URL_resourceDataDidBecomeAvailable(id arg2, id arg3, id self);
void inst_URL_resourceDidFailLoadingWithReason(id arg2, id arg3, id self);
void inst_URLResourceDidCancelLoading(id arg2, id self);
void inst_URLResourceDidFinishLoading(id arg2, id self);
void inst_performSelectorOnMainThread_withObject_waitUntilDone_modes(SEL arg2, id arg3, unsigned char arg4, id arg5, id self);
void inst_performSelectorOnMainThread_withObject_waitUntilDone(SEL arg2, id arg3, unsigned char arg4, id self);
void inst_performSelector_onThread_withObject_waitUntilDone_modes(SEL arg2, id arg3, id arg4, unsigned char arg5, id arg6, id self);
void inst_performSelector_onThread_withObject_waitUntilDone(SEL arg2, id arg3, id arg4, unsigned char arg5, id self);
void inst_performSelectorInBackground_withObject(SEL arg2, id arg3, id self);
void inst_performSelector_withObject_afterDelay(SEL arg2, id arg3, double arg4, id self);
void inst_performSelector_withObject_afterDelay_inModes(SEL arg2, id arg3, double arg4, id arg5, id self);
Class inst_classForPortCoder(id self);
id inst_replacementObjectForPortCoder(id arg2, id self);
void inst_handlePortMessage(id arg2, id self);
unsigned char inst_doesContain(id arg2, id self);
unsigned char inst_isCaseInsensitiveLike(id arg2, id self);
unsigned char inst_isEqualTo(id arg2, id self);
unsigned char inst_isGreaterThan(id arg2, id self);
unsigned char inst_isGreaterThanOrEqualTo(id arg2, id self);
unsigned char inst_isLessThan(id arg2, id self);
unsigned char inst_isLessThanOrEqualTo(id arg2, id self);
unsigned char inst_isLike(id arg2, id self);
unsigned char inst_isNotEqualTo(id arg2, id self);
unsigned int inst_sizeInBytes(id self);
unsigned int inst_sizeInBytesExcluding(id arg2, id self);
unsigned int inst_sizeOfContentExcluding(id arg2, id self);
unsigned int inst_sizeOfInstance(id self);
id inst_descriptionWithLocale(id arg2, id self);
id inst_descriptionWithLocale_indent(id arg2, unsigned int arg3, id self);
unsigned char inst__dealloc(id self);
unsigned char inst_isMetaClass(id self);
unsigned char inst_isClass(id self);
unsigned char inst_isMemberOfClassNamed(const char* arg2, id self);
struct objc_method_description* inst_descriptionForMethod(SEL arg2, id self);
id inst_read(void* arg2, id self);
id inst_write(void* arg2, id self);
id inst_awake(id self);
id inst_error(const char* arg2, id self);
unsigned char inst_isKindOf(Class arg2, id self);
unsigned char inst_isMemberOf(Class arg2, id self);
unsigned char inst_respondsTo(SEL arg2, id self);
unsigned char inst_conformsTo(id arg2, id self);
Unknown186913487 /* ? */* inst_methodFor(SEL arg2, id self);
id inst_doesNotRecognize(SEL arg2, id self);
id inst_perform_with(SEL arg2, id arg3, id self);
id inst_perform_with_with(SEL arg2, id arg3, id arg4, id self);
void* inst_observationInfo(id self);
void inst_setObservationInfo(void* arg2, id self);
void inst_willChangeValueForDependentsOfKey(id arg2, id self);
void inst_didChangeValueForDependentsOfKey(id arg2, id self);
void inst_willChangeValueForKey(id arg2, id self);
void inst_didChangeValueForKey(id arg2, id self);
void inst_didChange_valuesAtIndexes_forKey(unsigned int arg2, id arg3, id arg4, id self);
void inst_willChange_valuesAtIndexes_forKey(unsigned int arg2, id arg3, id arg4, id self);
void inst_willChangeValueForKey_withSetMutation_usingObjects(id arg2, unsigned int arg3, id arg4, id self);
void inst_didChangeValueForKey_withSetMutation_usingObjects(id arg2, unsigned int arg3, id arg4, id self);
void inst_addObserver_forKeyPath_options_context(id arg2, id arg3, unsigned int arg4, void* arg5, id self);
void inst_removeObserver_forKeyPath(id arg2, id arg3, id self);
void inst_observeValueForKeyPath_ofObject_change_context(id arg2, id arg3, id arg4, void* arg5, id self);
id inst_dictionaryWithValuesForKeys(id arg2, id self);
id inst_mutableSetValueForKey(id arg2, id self);
id inst_mutableSetValueForKeyPath(id arg2, id self);
id inst_mutableArrayValueForKey(id arg2, id self);
id inst_mutableArrayValueForKeyPath(id arg2, id self);
void inst_setNilValueForKey(id arg2, id self);
void inst_setValue_forKey(id arg2, id arg3, id self);
void inst_setValue_forKeyPath(id arg2, id arg3, id self);
void inst_setValue_forUndefinedKey(id arg2, id arg3, id self);
void inst_setValuesForKeysWithDictionary(id arg2, id self);
unsigned char inst_validateValue_forKey_error(id* arg2, id arg3, id* arg4, id self);
unsigned char inst_validateValue_forKeyPath_error(id* arg2, id arg3, id* arg4, id self);
id inst_valueForKey(id arg2, id self);
id inst_valueForKeyPath(id arg2, id self);
id inst_valueForUndefinedKey(id arg2, id self);
id inst_storedValueForKey(id arg2, id self);
void inst_takeStoredValue_forKey(id arg2, id arg3, id self);
void inst_takeStoredValuesFromDictionary(id arg2, id self);
id inst_handleQueryWithUnboundKey(id arg2, id self);
void inst_handleTakeValue_forUnboundKey(id arg2, id arg3, id self);
void inst_takeValue_forKey(id arg2, id arg3, id self);
void inst_takeValue_forKeyPath(id arg2, id arg3, id self);
void inst_takeValuesFromDictionary(id arg2, id self);
void inst_unableToSetNilForKey(id arg2, id self);
id inst_valuesForKeys(id arg2, id self);
Class inst_unarchiver_cannotDecodeObjectOfClassName_originalClasses(id arg2, id arg3, id arg4, id self);
id inst_unarchiver_didDecodeObject(id arg2, id arg3, id self);
void inst_unarchiverDidFinish(id arg2, id self);
void inst_unarchiverWillFinish(id arg2, id self);
void inst_unarchiver_willReplaceObject_withObject(id arg2, id arg3, id arg4, id self);
Class inst_classForKeyedArchiver(id self);
id inst_replacementObjectForKeyedArchiver(id arg2, id self);
void inst_archiver_didEncodeObject(id arg2, id arg3, id self);
id inst_archiver_willEncodeObject(id arg2, id arg3, id self);
void inst_archiverDidFinish(id arg2, id self);
void inst_archiverWillFinish(id arg2, id self);
void inst_archiver_willReplaceObject_withObject(id arg2, id arg3, id arg4, id self);
unsigned char inst__conformsToProtocolNamed(const char* arg2, id self);
id inst_attributeKeys(id self);
id inst_classDescription(id self);
id inst_inverseForRelationshipKey(id arg2, id self);
id inst_toManyRelationshipKeys(id self);
id inst_toOneRelationshipKeys(id self);
void inst__ARCCompliantRetainRelease(id self);
Class inst_class(id self);
id inst_className(id self);
id inst_copy(id self);
void inst_dealloc(id self);
void inst_finalize(id self);
id inst_free(id self);
id inst_init(id self);
id inst_mutableCopy(id self);
Class inst_superclass(id self);
unsigned char inst_conformsToProtocol(id arg2, id self);
Unknown1130177611 /* ? */* inst_methodForSelector(SEL arg2, id self);
id inst_methodSignatureForSelector(SEL arg2, id self);
id inst_description(id self);
void inst_doesNotRecognizeSelector(SEL arg2, id self);
void inst_forwardInvocation(id arg2, id self);
id inst_awakeAfterUsingCoder(id arg2, id self);
Class inst_classForArchiver(id self);
Class inst_classForCoder(id self);
id inst_replacementObjectForArchiver(id arg2, id self);
id inst_replacementObjectForCoder(id arg2, id self);
id inst_autorelease(id self);
unsigned int inst_hash(id self);
unsigned char inst_isEqual(id arg2, id self);
unsigned char inst_isKindOfClass(Class arg2, id self);
unsigned char inst_isMemberOfClass(Class arg2, id self);
unsigned char inst_isProxy(id self);
id inst_performSelector(SEL arg2, id self);
id inst_performSelector_withObject(SEL arg2, id arg3, id self);
id inst_performSelector_withObject_withObject(SEL arg2, id arg3, id arg4, id self);
oneway void inst_release(id self);
unsigned char inst_respondsToSelector(SEL arg2, id self);
id inst_retain(id self);
unsigned int inst_retainCount(id self);
id inst_self(id self);
struct _NSZone* inst_zone(id self);
void inst_encodeWithCoder(id arg2, id self);
id inst_initWithCoder(id arg2, id self);
id inst_autoContentAccessingProxy(id self);
id inst_forwardingTargetForSelector(SEL arg2, id self);

signed int inst_compare(id arg2, id self);
unsigned char inst_isInstance(id self);
unsigned char inst_makeImmutable(id self);
id inst_makeImmutableCopyOnFail(unsigned char arg2, id self);
id inst_notImplemented(SEL arg2, id self);
id inst_shouldNotImplement(SEL arg2, id self);
id inst_subclassResponsibility(SEL arg2, id self);
void inst_appendToXMLRPC_indent_for(id arg2, unsigned int arg3, id arg4, id self);
void inst_smtpClient_mimeFailed(id arg2, id arg3, id self);
void inst_smtpClient_mimeSent(id arg2, id arg3, id self);
void inst_smtpClient_mimeUnsent(id arg2, id arg3, id self);
id inst_parser_resolveExternalEntityName_systemID(id arg2, id arg3, id arg4, id self);
void inst_parser_didEndElement_namespaceURI_qualifiedName(id arg2, id arg3, id arg4, id arg5, id self);
void inst_parser_didEndMappingPrefix(id arg2, id arg3, id self);
void inst_parser_didStartElement_namespaceURI_qualifiedName_attributes(id arg2, id arg3, id arg4, id arg5, id arg6, id self);
void inst_parser_didStartMappingPrefix_toURI(id arg2, id arg3, id arg4, id self);
void inst_parser_foundAttributeDeclarationWithName_forElement_type_defaultValue(id arg2, id arg3, id arg4, id arg5, id arg6, id self);
void inst_parser_foundCDATA(id arg2, id arg3, id self);
void inst_parser_foundCharacters(id arg2, id arg3, id self);
void inst_parser_foundComment(id arg2, id arg3, id self);
void inst_parser_foundElementDeclarationWithName_model(id arg2, id arg3, id arg4, id self);
void inst_parser_foundExternalEntityDeclarationWithName_publicID_systemID(id arg2, id arg3, id arg4, id arg5, id self);
void inst_parser_foundIgnorableWhitespace(id arg2, id arg3, id self);
void inst_parser_foundInternalEntityDeclarationWithName_value(id arg2, id arg3, id arg4, id self);
void inst_parser_foundNotationDeclarationWithName_publicID_systemID(id arg2, id arg3, id arg4, id arg5, id self);
void inst_parser_foundProcessingInstructionWithTarget_data(id arg2, id arg3, id arg4, id self);
void inst_parser_foundUnparsedEntityDeclarationWithName_publicID_systemID_notationName(id arg2, id arg3, id arg4, id arg5, id arg6, id self);
void inst_parser_parseErrorOccurred(id arg2, id arg3, id self);
void inst_parser_validationErrorOccurred(id arg2, id arg3, id self);
void inst_parserDidEndDocument(id arg2, id self);
void inst_parserDidStartDocument(id arg2, id self);
void inst_downloadDidBegin(id arg2, id self);
void inst_downloadDidFinish(id arg2, id self);
void inst_download_decideDestinationWithSuggestedFilename(id arg2, id arg3, id self);
void inst_download_didCancelAuthenticationChallenge(id arg2, id arg3, id self);
void inst_download_didCreateDestination(id arg2, id arg3, id self);
void inst_download_didFailWithError(id arg2, id arg3, id self);
void inst_download_didReceiveAuthenticationChallenge(id arg2, id arg3, id self);
void inst_download_didReceiveDataOfLength(id arg2, unsigned int arg3, id self);
void inst_download_didReceiveResponse(id arg2, id arg3, id self);
unsigned char inst_download_shouldDecodeSourceDataOfMIMEType(id arg2, id arg3, id self);
void inst_download_willResumeWithResponse_fromByte(id arg2, id arg3, signed long long arg4, id self);
id inst_download_willSendRequest_redirectResponse(id arg2, id arg3, id arg4, id self);
void inst_connection_didCancelAuthenticationChallenge(id arg2, id arg3, id self);
void inst_connection_didFailWithError(id arg2, id arg3, id self);
void inst_connectionDidFinishLoading(id arg2, id self);
void inst_connection_didReceiveAuthenticationChallenge(id arg2, id arg3, id self);
void inst_connection_didReceiveData(id arg2, id arg3, id self);
void inst_connection_didReceiveResponse(id arg2, id arg3, id self);
id inst_connection_willCacheResponse(id arg2, id arg3, id self);
id inst_connection_willSendRequest_redirectResponse(id arg2, id arg3, id arg4, id self);
void inst_URL_resourceDataDidBecomeAvailable(id arg2, id arg3, id self);
void inst_URL_resourceDidFailLoadingWithReason(id arg2, id arg3, id self);
void inst_URLResourceDidCancelLoading(id arg2, id self);
void inst_URLResourceDidFinishLoading(id arg2, id self);
void inst_performSelectorOnMainThread_withObject_waitUntilDone_modes(SEL arg2, id arg3, unsigned char arg4, id arg5, id self);
void inst_performSelectorOnMainThread_withObject_waitUntilDone(SEL arg2, id arg3, unsigned char arg4, id self);
void inst_performSelector_onThread_withObject_waitUntilDone_modes(SEL arg2, id arg3, id arg4, unsigned char arg5, id arg6, id self);
void inst_performSelector_onThread_withObject_waitUntilDone(SEL arg2, id arg3, id arg4, unsigned char arg5, id self);
void inst_performSelectorInBackground_withObject(SEL arg2, id arg3, id self);
void inst_performSelector_withObject_afterDelay(SEL arg2, id arg3, double arg4, id self);
// End interface for class NSObject
